# -*- coding: utf-8 -*-
"""Santander Dev Week 2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oRqmNHdSTjSfrZbnv8GA4-sOPgxca13g

# Explorando IA Generativa em um Pipeline de ETL com Python

## DESCRIÇÃO

### Construção de um pipeline ETL (Extração, Transformação e Carregamento), demonstrando a relação entre dados, Inteligência Artificial (IA) e APIs.

- Extração: A aventura começa com uma planilha simples, de onde extrairemos os IDs dos usuários. Depois, usaremos esses IDs para acessar a API da 'Santander Dev Week 2023' e obter dados mais detalhados, um processo que evidencia a versatilidade na coleta de informações em Ciência de Dados.

- Transformação: Adentraremos o universo da IA com o GPT-4 da OpenAI, transformando esses dados em mensagens personalizadas de marketing. Veremos como a IA pode ser empregada de maneira inovadora e prática!

- Carregamento: Finalizaremos o processo enviando essas mensagens de volta para a API da 'Santander Dev Week 2023'. Este passo ilustra como dados transformados são reintegrados em sistemas, completando o ciclo de um pipeline ETL.


Python | REST | OpenAI  | API | ChatGPT | ETL

Full-Stack -- Avançado


ESPECIALISTA

Para a planilha simples, em formato CSV ("SDW2023.csv"), com uma lista de IDs de usuário do banco:

Consumir o endpoint GET https://sdw-2023-prd.up.railway.app/users/{id}  (API Santander Dev Week 2023) para obter os dados de cada cliente.
"""



"""Usar a API ChatGPT (OpenAI) para gerar uma mensagem de marketing personalizada para cada cliente, enfatizando a importância dos investimentos.

Enviar essas informações de volta para a API, atualizando a lista de "news" de cada usuário usando o endpoint PUT https://sdw-2023-prd.up.railway.app/users/{id}

## Extract

https://sdw-2023-prd.up.railway.app/swagger-ui/index.html#/Users%20Controller/create
"""

# Repositório: https://github.com/falvojr/santander-dev-week-2023
sdw2023_api_url = "https://sdw-2023-prd.up.railway.app"

# TODO Extrair os IDs do arquivo CSV

import pandas as pd

df = pd.read_csv("SDW2023.csv")
user_ids = df['UserID']
user_ids_list = df['UserID'].tolist()

def update_user(userdefdeeent(user_ids)
print(user_ids_list)

import requests
import json

def get_user(id):
    response = requests.get(f'{sdw2023_api_url}/users/{id}')
    return response.json() if response.status_code == 200 else None  # retorna apenas estado 200

# pega o usário e só atribui se for não nulo (:= walrus operator -> atribuição e filtro juntos)
# ver https://realpython.com/python-walrus-operator/
users = [user for id in user_ids_list if (user := get_user(id)) is not None]
print(json.dumps(users, indent=2))

"""## Transform"""

!pip install openai

# @title
# !pip install openai

"""Link do Open AI: https://platform.openai.com/account/api-keys"""

openai_api_key = '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'

import openai

openai.api_key = openai_api_key

def generate_ai_news(user):
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system",
             "content": "Você é um especialista em Análise de Dados."
            },
            {"role": "user",
             "content": f"Crie uma mensagem para {user['name']} sobre a importância dos Dados (máximo de 100 caracteres)"
            }
        ]
    )
    return completion.choices[0].message.content.strip('\"')

for user in users:
    news = generate_ai_news(user)
    print(news)
    user['news'].append({
        "icon": "https://digitalinnovationone.github.io/santander-dev-week-2023-api/icons/credit.svg",
        "description": news
    })

"""Pelo site open AI"""

import os
import openai
openai.organization = "org-fAcJjvfONF7dD2H3B5jMUkYC"
openai.api_key = os.getenv(openai_api_key)
openai.Model.list()

import os
import openai

openai_api_key = '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'

openai.api_key = os.getenv("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")

completion = openai.ChatCompletion.create(
  model="gpt-3.5-turbo",
  messages=[
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Hello!"}
  ]
)

print(completion.choices[0].message)

"""## Load

"""

def update_user(user):
    response = requests.put(f"{sdw2023_api_url}/users/{user['id']}", json=user)
    return True if response.status_code == 200 else False

for user in users:
    success = update_user(user)
    print(f"User {user['name']} updated? {success}")

